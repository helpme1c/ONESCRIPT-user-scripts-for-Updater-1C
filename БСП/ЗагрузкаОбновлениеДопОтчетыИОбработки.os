#use "updater1c"

// Благодарности за первичный код:
// Author: Plague Fox
// Site: PlugFox.ru  
// Infostart: https://infostart.ru/profile/PlugFox/
// Telegram: @PlugFox
// Email: PlugFox@gmail.com
// Github: http://github.com/PlugFox


// ****************************************************************************
// Переменные модуля
// ****************************************************************************

Перем errors;		// Признак того, что при выполнении скрипта были ошибки.
Перем updater;		// Обновлятор, через который мы получаем информацию о базе,
					// а также вызываем различные функции обновлятора.
Перем connector;	// Коннектор для подключения к базе.
Перем v8;			// Само подключение к базе через коннектор.

Перем ПутьПоиска;
Перем ПутьПеремещения;
Перем Перемещать;
Перем УчитыватьВерсионность;


// ****************************************************************************
// Ваш код для выполнения обновлятором
// ****************************************************************************

Процедура Главная()

//СписокПользователей = v8.ПользователиИнформационнойБазы.ПолучитьПользователей();
//Для Индекс = 0 По СписокПользователей.Количество() - 1 Цикл
//	Сообщить(СписокПользователей.Получить(Индекс).Имя);
//КонецЦикла;

    Если Не v8.ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
        Сообщить("Подсистема дополнительных отчетов и обработок - не используется в данной конфигурации");
    КонецЕсли;

    МассивОбработок = ПолучитьМассивПодключаемыхОбработок();

    Если Не МассивОбработок.Количество() Тогда Возврат КонецЕсли;

    Для Каждого Файл Из МассивОбработок Цикл
          Попытка
            Если НЕ Файл.Существует() Или Не Файл.ЭтоФайл() Тогда Продолжить КонецЕсли;

            Сообщить(Файл.ПолноеИмя);
            
            ПодключитьОбработку(Файл);
            ПереместитьОбработку(Файл);
        Исключение
            РегистрацияОшибки(ОписаниеОшибки(), "ОшибкаПриДобавлении" );    
        КонецПопытки;
    КонецЦикла;	 

КонецПроцедуры

Процедура РегистрацияОшибки(ОписаниеОшибки, ИмяСобытия)
    
    ОписаниеОшибки  = СтрШаблон("Ошибка обработки ""%1"".
                                |Описание ошибки: %2", ИмяСобытия, ОписаниеОшибки);
                                
    Сообщить(ОписаниеОшибки);    

КонецПроцедуры // РегистрацияОшибки()

Функция ПолучитьМассивПодключаемыхОбработок()
    Возврат НайтиФайлы(ПутьПоиска, "*.epf", Ложь);
КонецФункции // ПолучитьМассивПодключаемыхОбработок()

Процедура ПереместитьОбработку(Файл)
    Если Не Перемещать Тогда Возврат КонецЕсли;
    ПереместитьФайл(Файл.ПолноеИмя, СтрШаблон("%1/%2", ПутьПеремещения, Файл.Имя));   
КонецПроцедуры // ПереместитьОбработку()

Процедура ПодключитьОбработку(Файл)
    Перем ПараметрыРегистрации;
    
    _обработка   = v8.ВнешниеОбработки.Создать(Файл.ПолноеИмя);
    
    // Получим параметры регистрации
    Попытка
        ПараметрыРегистрации    = _обработка.СведенияОВнешнейОбработке();
    Исключение
        Сообщить("Не полученны данные СведенияОВнешнейОбработке");
    КонецПопытки;
    
    // Найдем в базе существующую версию этой обработки
    _ссылка  = v8.Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ПараметрыРегистрации.Наименование);
    //_ссылка = v8.Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта", _обработка.Метаданные().Имя);
    Если _ссылка = Неопределено Или _ссылка.Пустая() Тогда
        _объект = v8.Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();        
    Иначе
        // Сравним версии обработок
        Если УчитыватьВерсионность Тогда
            ВерсияПодключаемойОбработки = v8.СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыРегистрации.Версия);
            ВерсияТекущейОбработки      = v8.СтроковыеФункцииКлиентСервер.СтрокаВЧисло(_ссылка.Версия);
            
            Если ТипЗнч(ВерсияПодключаемойОбработки) = Тип("Число") 
            И ТипЗнч(ВерсияТекущейОбработки) = Тип("Число") 
            И ВерсияПодключаемойОбработки <= ВерсияТекущейОбработки Тогда 
                Возврат; // Если версия обработки не является более свежей
            КонецЕсли;
        КонецЕсли;
        _объект = _ссылка.ПолучитьОбъект();    
    КонецЕсли;
    
    // Добавим в базу подключаемую обработку
    v8.ЗаполнитьЗначенияСвойств(_объект, ПараметрыРегистрации);
    //_объект.ХранилищеОбработки  = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Файл.ПолноеИмя));
    двДанные = v8.NewObject("ДвоичныеДанные", Файл.ПолноеИмя);
    _объект.ХранилищеОбработки = v8.NewObject("ХранилищеЗначения",двДанные);

    _объект.Вид                 = v8.ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок." + ПараметрыРегистрации.Вид);
    _объект.Публикация          = v8.ПредопределенноеЗначение("Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется");
    _объект.ИмяОбъекта          = _обработка.Метаданные().Имя;
    _объект.ИмяФайла            = Файл.Имя;
    Попытка
        _объект.Ответственный   = v8.ПараметрыСеанса.ТекущийПользователь;
    Исключение
    КонецПопытки;
    _объект.ИспользоватьДляФормыОбъекта     = Истина;
    _объект.ИспользоватьДляФормыСписка      = Истина;
    _объект.РежимСовместимостиРазрешений    = v8.ПредопределенноеЗначение("Перечисление.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3");
    
    времПеременная = Неопределено;

    // Заполним ТЧ

    Если ПараметрыРегистрации.Свойство("Команды", времПеременная) Тогда
        _объект.Команды.Очистить();
        Для Каждого Команда Из ПараметрыРегистрации.Команды Цикл
            нКоманда = _объект.Команды.Добавить();
            v8.ЗаполнитьЗначенияСвойств(нКоманда, Команда);
            нКоманда.ВариантЗапуска = v8.ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок." + Команда.Использование);
        КонецЦикла;
    КонецЕсли;
    
    Если ПараметрыРегистрации.Свойство("Назначение", времПеременная) Тогда

        _объект.Назначение.Очистить();
        Для Каждого Назначение Из ПараметрыРегистрации.Назначение Цикл
            нНазначение = _объект.Назначение.Добавить();
            нНазначение.ОбъектНазначения    = v8.Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", Назначение);        
        КонецЦикла;
    КонецЕсли;   
    
    // добавим одну подсистему "Администрирование"
    //Если _объект.Разделы.Количество() = 0 Тогда
    //    нРазделы = _объект.Разделы.Добавить();
    //    ДопПодситема = v8.Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", "Подсистема.Администрирование"); 
    //    Если ДопПодситема = Неопределено Или ДопПодситема.Пустая() Тогда
    //            нРазделы.ОбъектНазначения    = ДопПодситема;
    //    КонецЕсли
    //КонецЕсли;
    
    
    // Запишем и подключим
    _объект.Записать();
    Имя = v8.ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(_объект.Ссылка);
    Если Имя = Неопределено Тогда
        Сообщить("Ошибка добавления обработки " + Файл.ПолноеИмя);
    Иначе
        Сообщить("Успешно добавления обработки " + Файл.ПолноеИмя);
    КонецЕсли;

КонецПроцедуры // ПодключитьОбработку()


// ****************************************************************************
// Служебные процедуры
// ****************************************************************************

Процедура ПриНачалеРаботы()

	errors = Ложь;

	updater = Новый Updater1C;

	// Если в скрипте не планируется использовать
	// подключение к базе - просто закомментируйте
	// две нижние строки.
    connector = updater.CreateConnector();
    Попытка
        v8 = updater.BaseConnectNew(connector);   
    Исключение
        Текст = ОписаниеОшибки();
        Сообщить("Ошибка подключения" + Текст);
    КонецПопытки;
	
	
КонецПроцедуры

Процедура ПриОкончанииРаботы()

	Если v8 <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(v8);
			v8 = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если connector <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(connector);
			connector = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если updater <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(updater);
			updater = Неопределено;
		Исключение
		КонецПопытки;
	КонецЕсли;

	Если errors Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;

КонецПроцедуры

// ****************************************************************************
// Инициализация и запуск скрипта
// ****************************************************************************

ПутьПоиска              = "C:\external-data-processors\";
ПутьПеремещения         = "C:\external-data-processors\.tmp";
Перемещать              = Ложь;
УчитыватьВерсионность   = Ложь;


ПриНачалеРаботы();

Попытка	
	Главная();
	updater.КодПользователяВыполнился();
Исключение
	errors = Истина;
	Сообщить("<span class='red'><b>" + ОписаниеОшибки() + "</b></span>");
КонецПопытки;

ПриОкончанииРаботы();